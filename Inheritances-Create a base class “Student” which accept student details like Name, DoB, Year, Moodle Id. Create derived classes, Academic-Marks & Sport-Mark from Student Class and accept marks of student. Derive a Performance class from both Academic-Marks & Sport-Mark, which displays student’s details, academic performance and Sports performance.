SINGLE:
#include <iostream>
using namespace std;
 class Animal {
   public:
 void eat() {
    cout<<"Eating..."<<endl;
 }
   };
   class Dog: public Animal
   {
       public:
     void bark(){
    cout<<"Barking...";
     }
   };
int main(void) {
    Dog d1;
    d1.eat();
    d1.bark();
    return 0;
}

MULTILEVEL:

#include <iostream>
using namespace std;
 class Animal {
   public:
 void eat() {
    cout<<"Eating..."<<endl;
 }
   };
   class Dog: public Animal
   {
       public:
     void bark(){
    cout<<"Barking..."<<endl;
     }
   };
   class BabyDog: public Dog
   {
       public:
     void weep() {
    cout<<"Weeping...";
     }
   };
int main(void) {
    BabyDog d1;
    d1.eat();
    d1.bark();
     d1.weep();
     return 0;
}

MULTIPLE:
#include <iostream>  
using namespace std;  
// create add class  
class add  
{  
    public:  
        int x = 20;  
        int y = 30;  
        void sum()  
        {  
            cout << " The sum of " << x << " and " << y << " is " <<x+y << endl;  
        }  
};  
  
// create Mul class  
class Mul  
{  
    public:  
        int a = 20;  
        int b = 30;  
        void mul()  
        {  
            cout << " The Multiplication of " << a << " and " << b << " is " <<a*b << endl;  
        }  
};  
  
// create Subclass  
class Sub  
{  
    public:  
        int a = 50;  
        int b = 30;  
        void sub()  
        {  
            cout << " The Subtraction of " << a << " and " << b << " is " <<a-b << endl;  
        }  
};  
  
// create Div class  
class Div  
{  
    // access specifier  
    public:  
        int a = 150;  
        int b = 30;  
        void div()  
        {  
            cout << " The Division of " << a << " and " << b << " is " <<a/b << endl;  
        }  
};  
  
// create a derived class to derive the member functions of all base classes  
class derived: public add, public Div, public Sub, public Mul  
{  
    // access specifier  
    public:  
        int p = 12;  
        int q = 5;  
        void mod()  
        {             
            cout << "The Modulus of " << p << " and " <<q << " is " << p % q << endl;  
        }  
};  
  
int main ()  
{  
    // create an object of the derived class  
    derived dr;  
    dr.mod(); // call derive class member function    
    // call all member function of class add, Div, Sub and Mul  
    dr.sum();  
    dr.mul();  
    dr.div();  
    dr.sub();  
}  

HYBRID 1:
#include <iostream>
using namespace std;
class APSIT{
public:
long moodle_id;
public:
void set_moodle_id(long m){
moodle_id=m;
cout<<"Moodle I'd is: "<<moodle_id<<endl;
}
};
class Student_Personnel : public APSIT{
private:
char Name[50],Gender,Address[100];
public:
void get_data(long x){
set_moodle_id(x);
cout<<"Enter Details of student(Name,Gender,Address): ";
cin>>Name>>Gender>>Address;
}
void show_data(){
cout<<"Name of student is:"<<Name<<endl;
cout<<"Gender is:"<<Gender<<endl;
cout<<"Address of student is:"<<Address<<endl;
}};
class Student_Academics {
public:
int sub1,sub2,sub3;
public:
void get_marks(){
cout<<"Enter the marks in three subjects: ";
cin>>sub1>>sub2>>sub3;
}
void display_marks(){
cout<<"Marks are:"<<" "<<sub1<<" "<<sub2<<" "<<sub3<<endl;
}
void Average(){
cout<<"Average marks are: "<<((sub1+sub2+sub3)/3)<<endl;
}
};
class Student: public Student_Personnel,public Student_Academics{
private:
int total;
float Avg;
public:
void Total(){
total=sub1+sub2+sub3;
cout<<"Total marks obtained: "<<total<<endl;
}
};
int main(){
Student s1;
long m=22104115;
s1.get_data(m);
s1.show_data();
s1.get_marks();
s1.display_marks();
s1.Average();
s1.Total();
return 0;
}
